import { useState, useMemo } from "react";
import { signIn, useSession } from "next-auth/react";
import { generateShiftEvents, type ShiftConfig, type ShiftEvent } from "@/lib/generator";

const todayISO = new Date().toISOString().slice(0, 10);
const CHUNK_SIZE = 25;

export function useShiftForm() {
  const { status } = useSession();

  const [cfg, setCfg] = useState<ShiftConfig>({
    timezone: process.env.NEXT_PUBLIC_DEFAULT_TZ || "Europe/London",
    rangeStart: todayISO,
    rangeEnd: new Date(new Date().setMonth(new Date().getMonth() + 11))
      .toISOString()
      .slice(0, 10),
    anchorOnDate: todayISO,
    startMode: "day",
    rotationWeeks: 2,
    dayStart: "07:25",
    nightStart: "19:25",
    hoursPerShift: 12,
    dayTitle: "Day Shift",
    nightTitle: "Night Shift",
    description: "Generated by ND Shift Rota",
    location: "Magna",
    lockTypePerCluster: true,
    rotationMode: "twoBlock",
  });

  const [useDedicated, setUseDedicated] = useState(true);
  const [dedicatedName, setDedicatedName] = useState("Shift Rota");
  const [dedicatedColorId, setDedicatedColorId] = useState("11");

  const [isPushing, setIsPushing] = useState(false);
  const [result, setResult] = useState<null | {
    ok: boolean;
    title: string;
    sub?: string;
  }>(null);
  const [progress, setProgress] = useState<{
    current: number;
    total: number;
  } | null>(null);

  const events = useMemo<ShiftEvent[]>(() => generateShiftEvents(cfg), [cfg]);

  function chunk<T>(arr: T[], size: number) {
    const out: T[][] = [];
    for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));
    return out;
  }

  async function pushToGoogle() {
    console.log("pushToGoogle called, status:", status);
    if (status !== "authenticated") {
      console.log("Not authenticated, redirecting to sign in");
      await signIn("google", { callbackUrl: window.location.href });
      return;
    }
    console.log("Authenticated, starting push process");
    setIsPushing(true);
    setResult(null);
    setProgress({ current: 0, total: events.length });

    let totalUpserted = 0;

    try {
      const batches = chunk(events, CHUNK_SIZE);
      console.log("Created", batches.length, "batches");
      for (const part of batches) {
        console.log("Making request for batch with", part.length, "events");
        console.log("About to make fetch request to /api/push");
        const res = await fetch("/api/push", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            events: part,
            timezone: cfg.timezone,
            useDedicatedCalendar: useDedicated,
            dedicatedCalendarName: dedicatedName,
            dedicatedCalendarColorId: dedicatedColorId,
          }),
        });
        console.log("Fetch response received:", res.status, res.statusText);

        if (res.status === 401) {
          await signIn("google", { callbackUrl: window.location.href });
          return;
        }

        const raw = await res.text();
        let parsed: any = null;
        try {
          parsed = JSON.parse(raw);
        } catch {}

        if (!res.ok) {
          const msg = parsed
            ? parsed.message || raw || res.statusText
            : raw || res.statusText;
          setResult({
            ok: false,
            title: "Failed to update calendar",
            sub: String(msg),
          });
          return;
        }

        const up = Number(parsed?.upserted ?? part.length);
        totalUpserted += up;

        setProgress((prev) =>
          prev
            ? {
                current: Math.min(prev.current + up, prev.total),
                total: prev.total,
              }
            : null
        );
      }

      setResult({
        ok: true,
        title: "Calendar updated!",
        sub: `Synced ${totalUpserted} events to ${
          useDedicated ? dedicatedName : "primary"
        }`,
      });
    } catch (err: any) {
      setResult({
        ok: false,
        title: "Network error",
        sub: err?.message || String(err),
      });
    } finally {
      setIsPushing(false);
      setProgress(null);
    }
  }

  async function deleteFromGoogle() {
    if (status !== "authenticated") {
      await signIn("google", { callbackUrl: window.location.href });
      return;
    }
    setIsPushing(true);
    setResult(null);
    try {
      const res = await fetch("/api/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          start: cfg.rangeStart,
          end: cfg.rangeEnd,
          useDedicatedCalendar: useDedicated,
          dedicatedCalendarName: dedicatedName,
        }),
      });

      if (res.status === 401) {
        await signIn("google", { callbackUrl: window.location.href });
        return;
      }

      const parsed = await res.json().catch(() => ({}));
      if (!res.ok) {
        setResult({
          ok: false,
          title: "Delete failed",
          sub: parsed?.message || res.statusText,
        });
        return;
      }
      setResult({
        ok: true,
        title: "Deleted",
        sub: `Removed ${parsed.deleted} events from ${parsed.calendarId}`,
      });
    } catch (err: any) {
      setResult({
        ok: false,
        title: "Network error",
        sub: err?.message || String(err),
      });
    } finally {
      setIsPushing(false);
    }
  }

  const qs = new URLSearchParams({
    tz: cfg.timezone,
    rs: cfg.rangeStart,
    re: cfg.rangeEnd,
    anchor: cfg.anchorOnDate,
    mode: cfg.startMode,
    rotw: String(cfg.rotationWeeks),
    dstart: cfg.dayStart,
    nstart: cfg.nightStart,
    hours: String(cfg.hoursPerShift),
    dtitle: cfg.dayTitle || "",
    ntitle: cfg.nightTitle || "",
    desc: cfg.description || "",
    lock: cfg.lockTypePerCluster ? "1" : "0",
    rmode: cfg.rotationMode ?? "twoBlock",
  }).toString();

  return {
    status,
    cfg,
    setCfg,
    useDedicated,
    setUseDedicated,
    dedicatedName,
    setDedicatedName,
    dedicatedColorId,
    setDedicatedColorId,
    isPushing,
    result,
    setResult,
    progress,
    events,
    pushToGoogle,
    deleteFromGoogle,
    qs,
  };
}
