import { NextResponse } from "next/server";
import { generateShiftEvents } from "@/lib/generator";

function toICSDate(dtISO: string) {
  const d = new Date(dtISO);
  const pad = (n: number) => String(n).padStart(2, "0");
  return (
    d.getUTCFullYear().toString() +
    pad(d.getUTCMonth() + 1) +
    pad(d.getUTCDate()) +
    "T" +
    pad(d.getUTCHours()) +
    pad(d.getUTCMinutes()) +
    pad(d.getUTCSeconds()) +
    "Z"
  );
}

export async function GET(req: Request) {
  const url = new URL(req.url);
  const tz =
    url.searchParams.get("tz") ?? process.env.DEFAULT_TZ ?? "Europe/London";
  const rs =
    url.searchParams.get("rs") ?? new Date().toISOString().slice(0, 10);
  const re =
    url.searchParams.get("re") ??
    new Date(new Date().setMonth(new Date().getMonth() + 6))
      .toISOString()
      .slice(0, 10);
  const anchor = url.searchParams.get("anchor") ?? rs;
  const mode = (url.searchParams.get("mode") ?? "day") as "day" | "night";
  const rotw = Number(url.searchParams.get("rotw") ?? "2");
  const dstart = url.searchParams.get("dstart") ?? "07:00";
  const nstart = url.searchParams.get("nstart") ?? "19:00";
  const hours = Number(url.searchParams.get("hours") ?? "12");
  const dtitle = url.searchParams.get("dtitle") ?? "Day Shift";
  const ntitle = url.searchParams.get("ntitle") ?? "Night Shift";
  const desc = url.searchParams.get("desc") ?? "Generated by Shift Rota";
  const loc = url.searchParams.get("loc") ?? "";
  const lock = url.searchParams.get("lock"); // NEW
  const lockTypePerCluster = lock !== "0";
  const rmodeParam = url.searchParams.get("rmode") ?? "twoBlock";
  const rotationMode = rmodeParam === "fortnight" ? "fortnight" : "twoBlock";

  const events = generateShiftEvents({
    timezone: tz,
    rangeStart: rs,
    rangeEnd: re,
    anchorOnDate: anchor,
    startMode: mode,
    rotationWeeks: rotw,
    dayStart: dstart,
    nightStart: nstart,
    hoursPerShift: hours,
    dayTitle: dtitle,
    nightTitle: ntitle,
    description: desc,
    location: loc,
    lockTypePerCluster,
    rotationMode, // NEW
    // lockTypePerCluster: lock !== "0",
  });

  const lines: string[] = [];
  lines.push("BEGIN:VCALENDAR");
  lines.push("VERSION:2.0");
  lines.push("PRODID:-//Shift Rota//EN");
  lines.push("CALSCALE:GREGORIAN");
  for (const ev of events) {
    lines.push("BEGIN:VEVENT");
    lines.push("UID:" + ev.id + "@shift-rota");
    lines.push("DTSTAMP:" + toICSDate(new Date().toISOString()));
    lines.push("DTSTART:" + toICSDate(ev.startISO));
    lines.push("DTEND:" + toICSDate(ev.endISO));
    lines.push("SUMMARY:" + ev.title.replace(/[\n\r]/g, " "));
    if (ev.location)
      lines.push("LOCATION:" + ev.location.replace(/[\n\r]/g, " "));
    if (ev.description)
      lines.push("DESCRIPTION:" + ev.description.replace(/[\n\r]/g, " "));
    lines.push("END:VEVENT");
  }
  lines.push("END:VCALENDAR");

  const body = lines.join("\r\n");
  return new NextResponse(body, {
    status: 200,
    headers: {
      "Content-Type": "text/calendar; charset=utf-8",
      "Content-Disposition": 'inline; filename="shift-rota.ics"',
      "Cache-Control": "max-age=3600",
    },
  });
}
