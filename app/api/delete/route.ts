export const runtime = "nodejs";
export const dynamic = "force-dynamic";
import { NextResponse } from "next/server";
import { calendarClient, findCalendarIdBySummary } from "@/lib/google";
import { auth } from "@/auth";

export async function POST(req: Request) {
  const session = await auth();
  if (!session) {
    return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
  }
  const { start, end, useDedicatedCalendar, dedicatedCalendarName } =
    await req.json();
  if (!start || !end)
    return NextResponse.json(
      { message: "start and end are required (YYYY-MM-DD)" },
      { status: 400 }
    );

  const { accessToken, refreshToken } = session as any;
  const cal = calendarClient(accessToken, refreshToken);

  let calendarId = "primary";
  if (useDedicatedCalendar) {
    const name = dedicatedCalendarName || "Shift Rota";
    const found = await findCalendarIdBySummary(cal, name);
    if (!found)
      return NextResponse.json({
        deleted: 0,
        note: "Dedicated calendar not found",
      });
    calendarId = found;
  }

  // We target events our app created (by description text)
  const query = "Generated by Shift Rota"; // adjust if you changed description
  let deleted = 0,
    pageToken: string | undefined = undefined;

  do {
    const res: any = await cal.events.list({
      calendarId,
      timeMin: new Date(start + "T00:00:00Z").toISOString(),
      timeMax: new Date(end + "T23:59:59Z").toISOString(),
      singleEvents: true,
      maxResults: 2500,
      pageToken,
      q: query,
    });
    const items = res.data.items || [];
    for (const ev of items) {
      if (!ev.id) continue;
      try {
        await cal.events.delete({ calendarId, eventId: ev.id });
        deleted++;
      } catch (e) {
        console.error("Delete failed", ev.id, e);
      }
    }
    pageToken = res.data.nextPageToken || undefined;
  } while (pageToken);

  return NextResponse.json({ deleted, calendarId });
}
