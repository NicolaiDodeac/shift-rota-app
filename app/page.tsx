"use client";

import { useMemo, useState } from "react";
import { signIn, useSession } from "next-auth/react";
import LoaderOverlay from "@/components/LoaderOverlay";
import ResultOverlay from "@/components/ResultOverlay";
import {
  generateShiftEvents,
  type ShiftConfig,
  type ShiftEvent,
} from "@/lib/generator";
import s from "./page.module.css";

const todayISO = new Date().toISOString().slice(0, 10);
const CHUNK_SIZE = 25;

export default function Page() {
  const { status } = useSession(); // "authenticated" | "unauthenticated" | "loading"

  const [cfg, setCfg] = useState<ShiftConfig>({
    timezone: process.env.NEXT_PUBLIC_DEFAULT_TZ || "Europe/London",
    rangeStart: todayISO,
    rangeEnd: new Date(new Date().setMonth(new Date().getMonth() + 11))
      .toISOString()
      .slice(0, 10),
    anchorOnDate: todayISO,
    startMode: "day",
    rotationWeeks: 2,
    dayStart: "07:25",
    nightStart: "19:25",
    hoursPerShift: 12,
    dayTitle: "Day Shift",
    nightTitle: "Night Shift",
    description: "Generated by ND Shift Rota",
    location: "Magna",
    lockTypePerCluster: true,
    rotationMode: "twoBlock",
  });

  const [useDedicated, setUseDedicated] = useState(true);
  const [dedicatedName, setDedicatedName] = useState("Shift Rota");
  const [dedicatedColorId, setDedicatedColorId] = useState("11");

  const [isPushing, setIsPushing] = useState(false);
  const [result, setResult] = useState<null | {
    ok: boolean;
    title: string;
    sub?: string;
  }>(null);
  const [progress, setProgress] = useState<{
    current: number;
    total: number;
  } | null>(null);

  const events = useMemo<ShiftEvent[]>(() => generateShiftEvents(cfg), [cfg]);

  function chunk<T>(arr: T[], size: number) {
    const out: T[][] = [];
    for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));
    return out;
  }

  async function pushToGoogle() {
    if (status !== "authenticated") {
      await signIn("google", { callbackUrl: window.location.href });
      return;
    }
    setIsPushing(true);
    setResult(null);
    setProgress({ current: 0, total: events.length });

    let totalUpserted = 0;

    try {
      const batches = chunk(events, CHUNK_SIZE);
      for (const part of batches) {
        const res = await fetch("/api/push", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            events: part,
            timezone: cfg.timezone,
            useDedicatedCalendar: useDedicated,
            dedicatedCalendarName: dedicatedName,
            dedicatedCalendarColorId: dedicatedColorId,
          }),
        });

        if (res.status === 401) {
          await signIn("google", { callbackUrl: window.location.href });
          return;
        }

        const raw = await res.text();
        let parsed: any = null;
        try {
          parsed = JSON.parse(raw);
        } catch {}

        if (!res.ok) {
          const msg = parsed
            ? parsed.message || raw || res.statusText
            : raw || res.statusText;
          setResult({
            ok: false,
            title: "Failed to update calendar",
            sub: String(msg),
          });
          return;
        }

        const up = Number(parsed?.upserted ?? part.length);
        totalUpserted += up;

        setProgress((prev) =>
          prev
            ? {
                current: Math.min(prev.current + up, prev.total),
                total: prev.total,
              }
            : null
        );
      }

      setResult({
        ok: true,
        title: "Calendar updated!",
        sub: `Synced ${totalUpserted} events to ${
          useDedicated ? dedicatedName : "primary"
        }`,
      });
    } catch (err: any) {
      setResult({
        ok: false,
        title: "Network error",
        sub: err?.message || String(err),
      });
    } finally {
      setIsPushing(false);
      setProgress(null);
    }
  }

  const qs = new URLSearchParams({
    tz: cfg.timezone,
    rs: cfg.rangeStart,
    re: cfg.rangeEnd,
    anchor: cfg.anchorOnDate,
    mode: cfg.startMode,
    rotw: String(cfg.rotationWeeks),
    dstart: cfg.dayStart,
    nstart: cfg.nightStart,
    hours: String(cfg.hoursPerShift),
    dtitle: cfg.dayTitle || "",
    ntitle: cfg.nightTitle || "",
    desc: cfg.description || "",
    lock: cfg.lockTypePerCluster ? "1" : "0",
    rmode: cfg.rotationMode ?? "twoBlock",
  }).toString();

  async function deleteFromGoogle() {
    if (status !== "authenticated") {
      await signIn("google", { callbackUrl: window.location.href });
      return;
    }
    setIsPushing(true);
    setResult(null);
    try {
      const res = await fetch("/api/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          start: cfg.rangeStart,
          end: cfg.rangeEnd,
          useDedicatedCalendar: useDedicated,
          dedicatedCalendarName: dedicatedName,
        }),
      });

      if (res.status === 401) {
        await signIn("google", { callbackUrl: window.location.href });
        return;
      }

      const parsed = await res.json().catch(() => ({}));
      if (!res.ok) {
        setResult({
          ok: false,
          title: "Delete failed",
          sub: parsed?.message || res.statusText,
        });
        return;
      }
      setResult({
        ok: true,
        title: "Deleted",
        sub: `Removed ${parsed.deleted} events from ${parsed.calendarId}`,
      });
    } catch (err: any) {
      setResult({
        ok: false,
        title: "Network error",
        sub: err?.message || String(err),
      });
    } finally {
      setIsPushing(false);
    }
  }

  return (
    <div className={s.wrap}>
      <h1 className={s.h1}>4-on-4-off Shift Rota</h1>

      {/* gentle sign-in nudge */}
      {status !== "authenticated" && (
        <section className={s.card}>
          <p>
            <b>Sign in to sync with Google Calendar.</b>
          </p>
          <div className={s.actions}>
            <button
              className={s.btn}
              onClick={() =>
                signIn("google", { callbackUrl: window.location.href })
              }
            >
              Sign in with Google
            </button>
            <a className={`${s.btn} ${s.secondary}`} href="/auth/request">
              Not on the tester list? Request access
            </a>
          </div>
        </section>
      )}

      <section className={s.card}>
        <div className={`${s.grid} ${s.gridCols3}`}>
          <div>
            <label>Timezone</label>
            <input
              type="text"
              value={cfg.timezone}
              onChange={(e) => setCfg({ ...cfg, timezone: e.target.value })}
            />
          </div>
          <div>
            <label>Season Start</label>
            <input
              type="date"
              value={cfg.rangeStart}
              onChange={(e) => setCfg({ ...cfg, rangeStart: e.target.value })}
            />
          </div>
          <div>
            <label>Season End</label>
            <input
              type="date"
              value={cfg.rangeEnd}
              onChange={(e) => setCfg({ ...cfg, rangeEnd: e.target.value })}
            />
          </div>
          <div>
            <label>Anchor ON Day (first of a 4-on block)</label>
            <input
              type="date"
              value={cfg.anchorOnDate}
              onChange={(e) => setCfg({ ...cfg, anchorOnDate: e.target.value })}
            />
          </div>
          <div>
            <label>Rotation starts as</label>
            <select
              value={cfg.startMode}
              onChange={(e) =>
                setCfg({ ...cfg, startMode: e.target.value as any })
              }
            >
              <option value="day">Day</option>
              <option value="night">Night</option>
            </select>
          </div>
          <div>
            <label>Rotation rule</label>
            <select
              value={cfg.rotationMode ?? "twoBlock"}
              onChange={(e) =>
                setCfg({ ...cfg, rotationMode: e.target.value as any })
              }
            >
              <option value="twoBlock">2× 4-on → flip (recommended)</option>
              <option value="fortnight">Flip every N weeks</option>
            </select>
          </div>
          <div>
            <label>Day shift starts</label>
            <input
              type="time"
              value={cfg.dayStart}
              onChange={(e) => setCfg({ ...cfg, dayStart: e.target.value })}
            />
          </div>
          <div>
            <label>Night shift starts</label>
            <input
              type="time"
              value={cfg.nightStart}
              onChange={(e) => setCfg({ ...cfg, nightStart: e.target.value })}
            />
          </div>
          <div>
            <label>Hours per shift</label>
            <input
              type="number"
              min={1}
              value={cfg.hoursPerShift}
              onChange={(e) =>
                setCfg({ ...cfg, hoursPerShift: Number(e.target.value) })
              }
            />
          </div>
          <div>
            <label>Day title</label>
            <input
              type="text"
              value={cfg.dayTitle}
              onChange={(e) => setCfg({ ...cfg, dayTitle: e.target.value })}
            />
          </div>
          <div>
            <label>Night title</label>
            <input
              type="text"
              value={cfg.nightTitle}
              onChange={(e) => setCfg({ ...cfg, nightTitle: e.target.value })}
            />
          </div>
          <div>
            <label>Location</label>
            <input
              type="text"
              value={cfg.location}
              onChange={(e) => setCfg({ ...cfg, location: e.target.value })}
            />
          </div>
        </div>

        <div className={s.panel}>
          <div
            style={{
              display: "flex",
              gap: 12,
              alignItems: "center",
              flexWrap: "wrap",
            }}
          >
            <label style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <input
                type="checkbox"
                checked={cfg.lockTypePerCluster ?? true}
                onChange={(e) =>
                  setCfg({ ...cfg, lockTypePerCluster: e.target.checked })
                }
              />
              Lock Day/Night per 4-on (recommended)
            </label>

            <label style={{ display: "flex", alignItems: "center", gap: 8 }}>
              <input
                type="checkbox"
                checked={useDedicated}
                onChange={(e) => setUseDedicated(e.target.checked)}
              />
              Use dedicated “Shift Rota” calendar
            </label>

            {useDedicated && (
              <>
                <label>
                  <span className={s.muted} style={{ fontSize: 12 }}>
                    Calendar name
                  </span>
                  <input
                    type="text"
                    value={dedicatedName}
                    onChange={(e) => setDedicatedName(e.target.value)}
                  />
                </label>
                <label>
                  <span className={s.muted} style={{ fontSize: 12 }}>
                    Color ID
                  </span>
                  <input
                    type="number"
                    value={dedicatedColorId}
                    onChange={(e) => setDedicatedColorId(e.target.value)}
                  />
                </label>
              </>
            )}
          </div>
        </div>

        <div className={s.actions}>
          <button className={s.btn} onClick={pushToGoogle} disabled={isPushing}>
            {isPushing ? "Syncing…" : "Add to Google Calendar"}
          </button>

          <a
            className={`${s.btn} ${s.secondary} ${isPushing ? s.disabled : ""}`}
            href={`/api/ics?${qs}`}
            onClick={(e) => isPushing && e.preventDefault()}
            aria-disabled={isPushing}
            rel="noreferrer"
            target="_blank"
          >
            Get ICS feed (subscribe)
          </a>

          <button
            className={`${s.btn} ${s.secondary}`}
            onClick={deleteFromGoogle}
            disabled={isPushing}
          >
            {isPushing ? "Working…" : "Delete season (Google)"}
          </button>
        </div>
      </section>

      <section className={s.card}>
        <h3 style={{ fontSize: 22, marginBottom: 6 }}>
          Preview ({events.length} shifts)
        </h3>
        <table className={s.table}>
          <thead>
            <tr>
              <th>Start (local)</th>
              <th>End (local)</th>
              <th>Type</th>
              <th>Title</th>
            </tr>
          </thead>
          <tbody>
            {events.slice(0, 100).map((ev) => (
              <tr key={ev.id}>
                <td>{new Date(ev.localStart).toLocaleString()}</td>
                <td>{new Date(ev.localEnd).toLocaleString()}</td>
                <td>{ev.type}</td>
                <td>{ev.title}</td>
              </tr>
            ))}
          </tbody>
        </table>
        {events.length > 100 && (
          <p className={s.muted} style={{ marginTop: 8 }}>
            Showing first 100…
          </p>
        )}
      </section>

      {/* Overlays */}
      {isPushing && (
        <LoaderOverlay
          title="Syncing to Google Calendar…"
          sub="Please keep this tab open."
          progressCurrent={progress?.current}
          progressTotal={progress?.total}
        />
      )}
      {result && (
        <ResultOverlay
          ok={result.ok}
          title={result.title}
          sub={result.sub}
          onClose={() => setResult(null)}
          autoHideMs={2200}
        />
      )}
    </div>
  );
}
